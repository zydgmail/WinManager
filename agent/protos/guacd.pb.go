// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        v4.25.1
// source: guacd.proto

package protos

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// MouseRequest represents a mouse input request
type MouseRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	X      int32 `protobuf:"varint,1,opt,name=x,proto3" json:"x,omitempty"`
	Y      int32 `protobuf:"varint,2,opt,name=y,proto3" json:"y,omitempty"`
	Method int64 `protobuf:"varint,3,opt,name=method,proto3" json:"method,omitempty"`
	Ts     int64 `protobuf:"varint,4,opt,name=ts,proto3" json:"ts,omitempty"`
}

func (x *MouseRequest) Reset() {
	*x = MouseRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_guacd_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MouseRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MouseRequest) ProtoMessage() {}

func (x *MouseRequest) ProtoReflect() protoreflect.Message {
	mi := &file_guacd_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MouseRequest.ProtoReflect.Descriptor instead.
func (*MouseRequest) Descriptor() ([]byte, []int) {
	return file_guacd_proto_rawDescGZIP(), []int{0}
}

func (x *MouseRequest) GetX() int32 {
	if x != nil {
		return x.X
	}
	return 0
}

func (x *MouseRequest) GetY() int32 {
	if x != nil {
		return x.Y
	}
	return 0
}

func (x *MouseRequest) GetMethod() int64 {
	if x != nil {
		return x.Method
	}
	return 0
}

func (x *MouseRequest) GetTs() int64 {
	if x != nil {
		return x.Ts
	}
	return 0
}

// MouseReply represents a mouse input response
type MouseReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ack int64 `protobuf:"varint,1,opt,name=ack,proto3" json:"ack,omitempty"`
}

func (x *MouseReply) Reset() {
	*x = MouseReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_guacd_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MouseReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MouseReply) ProtoMessage() {}

func (x *MouseReply) ProtoReflect() protoreflect.Message {
	mi := &file_guacd_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MouseReply.ProtoReflect.Descriptor instead.
func (*MouseReply) Descriptor() ([]byte, []int) {
	return file_guacd_proto_rawDescGZIP(), []int{1}
}

func (x *MouseReply) GetAck() int64 {
	if x != nil {
		return x.Ack
	}
	return 0
}

// ScreenshotRequest represents a screenshot request
type ScreenshotRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ScreenshotRequest) Reset() {
	*x = ScreenshotRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_guacd_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ScreenshotRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ScreenshotRequest) ProtoMessage() {}

func (x *ScreenshotRequest) ProtoReflect() protoreflect.Message {
	mi := &file_guacd_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ScreenshotRequest.ProtoReflect.Descriptor instead.
func (*ScreenshotRequest) Descriptor() ([]byte, []int) {
	return file_guacd_proto_rawDescGZIP(), []int{2}
}

// ScreenshotReply represents a screenshot response
type ScreenshotReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Image []byte `protobuf:"bytes,1,opt,name=image,proto3" json:"image,omitempty"`
}

func (x *ScreenshotReply) Reset() {
	*x = ScreenshotReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_guacd_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ScreenshotReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ScreenshotReply) ProtoMessage() {}

func (x *ScreenshotReply) ProtoReflect() protoreflect.Message {
	mi := &file_guacd_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ScreenshotReply.ProtoReflect.Descriptor instead.
func (*ScreenshotReply) Descriptor() ([]byte, []int) {
	return file_guacd_proto_rawDescGZIP(), []int{3}
}

func (x *ScreenshotReply) GetImage() []byte {
	if x != nil {
		return x.Image
	}
	return nil
}

// KeyRequest represents a keyboard input request
type KeyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key    int32 `protobuf:"varint,1,opt,name=key,proto3" json:"key,omitempty"`
	Method int32 `protobuf:"varint,2,opt,name=method,proto3" json:"method,omitempty"`
	Ts     int64 `protobuf:"varint,3,opt,name=ts,proto3" json:"ts,omitempty"`
}

func (x *KeyRequest) Reset() {
	*x = KeyRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_guacd_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KeyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KeyRequest) ProtoMessage() {}

func (x *KeyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_guacd_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KeyRequest.ProtoReflect.Descriptor instead.
func (*KeyRequest) Descriptor() ([]byte, []int) {
	return file_guacd_proto_rawDescGZIP(), []int{4}
}

func (x *KeyRequest) GetKey() int32 {
	if x != nil {
		return x.Key
	}
	return 0
}

func (x *KeyRequest) GetMethod() int32 {
	if x != nil {
		return x.Method
	}
	return 0
}

func (x *KeyRequest) GetTs() int64 {
	if x != nil {
		return x.Ts
	}
	return 0
}

// KeyReply represents a keyboard input response
type KeyReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ack int64 `protobuf:"varint,1,opt,name=ack,proto3" json:"ack,omitempty"`
}

func (x *KeyReply) Reset() {
	*x = KeyReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_guacd_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KeyReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KeyReply) ProtoMessage() {}

func (x *KeyReply) ProtoReflect() protoreflect.Message {
	mi := &file_guacd_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KeyReply.ProtoReflect.Descriptor instead.
func (*KeyReply) Descriptor() ([]byte, []int) {
	return file_guacd_proto_rawDescGZIP(), []int{5}
}

func (x *KeyReply) GetAck() int64 {
	if x != nil {
		return x.Ack
	}
	return 0
}

// PasteRequest represents a paste request
type PasteRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data string `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *PasteRequest) Reset() {
	*x = PasteRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_guacd_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PasteRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PasteRequest) ProtoMessage() {}

func (x *PasteRequest) ProtoReflect() protoreflect.Message {
	mi := &file_guacd_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PasteRequest.ProtoReflect.Descriptor instead.
func (*PasteRequest) Descriptor() ([]byte, []int) {
	return file_guacd_proto_rawDescGZIP(), []int{6}
}

func (x *PasteRequest) GetData() string {
	if x != nil {
		return x.Data
	}
	return ""
}

// PasteReply represents a paste response
type PasteReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ack int64 `protobuf:"varint,1,opt,name=ack,proto3" json:"ack,omitempty"`
}

func (x *PasteReply) Reset() {
	*x = PasteReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_guacd_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PasteReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PasteReply) ProtoMessage() {}

func (x *PasteReply) ProtoReflect() protoreflect.Message {
	mi := &file_guacd_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PasteReply.ProtoReflect.Descriptor instead.
func (*PasteReply) Descriptor() ([]byte, []int) {
	return file_guacd_proto_rawDescGZIP(), []int{7}
}

func (x *PasteReply) GetAck() int64 {
	if x != nil {
		return x.Ack
	}
	return 0
}

var file_guacd_proto_msgTypes = make([]protoimpl.MessageInfo, 8)
var file_guacd_proto_goTypes = []interface{}{
	(*MouseRequest)(nil),      // 0: protos.MouseRequest
	(*MouseReply)(nil),        // 1: protos.MouseReply
	(*ScreenshotRequest)(nil), // 2: protos.ScreenshotRequest
	(*ScreenshotReply)(nil),   // 3: protos.ScreenshotReply
	(*KeyRequest)(nil),        // 4: protos.KeyRequest
	(*KeyReply)(nil),          // 5: protos.KeyReply
	(*PasteRequest)(nil),      // 6: protos.PasteRequest
	(*PasteReply)(nil),        // 7: protos.PasteReply
}

var file_guacd_proto_rawDesc = []byte{
	0x0a, 0x0b, 0x67, 0x75, 0x61, 0x63, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x06, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x73, 0x22, 0x56, 0x0a, 0x0c, 0x4d, 0x6f, 0x75, 0x73, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0c, 0x0a, 0x01, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x01, 0x78, 0x12, 0x0c, 0x0a, 0x01, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x01,
	0x79, 0x12, 0x16, 0x0a, 0x06, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x06, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x12, 0x0e, 0x0a, 0x02, 0x74, 0x73, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x74, 0x73, 0x22, 0x1e, 0x0a, 0x0a, 0x4d, 0x6f, 0x75,
	0x73, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x61, 0x63, 0x6b, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x61, 0x63, 0x6b, 0x22, 0x12, 0x0a, 0x10, 0x53, 0x63, 0x72,
	0x65, 0x65, 0x6e, 0x73, 0x68, 0x6f, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x27,
	0x0a, 0x0f, 0x53, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x73, 0x68, 0x6f, 0x74, 0x52, 0x65, 0x70, 0x6c,
	0x79, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x05, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x22, 0x4a, 0x0a, 0x0a, 0x4b, 0x65, 0x79, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x6d, 0x65, 0x74, 0x68, 0x6f,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x12,
	0x0e, 0x0a, 0x02, 0x74, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x74, 0x73, 0x22,
	0x1c, 0x0a, 0x08, 0x4b, 0x65, 0x79, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x61,
	0x63, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x61, 0x63, 0x6b, 0x22, 0x22, 0x0a,
	0x0c, 0x50, 0x61, 0x73, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a,
	0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x64, 0x61, 0x74,
	0x61, 0x22, 0x1e, 0x0a, 0x0a, 0x50, 0x61, 0x73, 0x74, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12,
	0x10, 0x0a, 0x03, 0x61, 0x63, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x61, 0x63,
	0x6b, 0x32, 0xd8, 0x01, 0x0a, 0x06, 0x47, 0x75, 0x61, 0x63, 0x64, 0x12, 0x35, 0x0a, 0x05, 0x4d,
	0x6f, 0x75, 0x73, 0x65, 0x12, 0x14, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x4d, 0x6f,
	0x75, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x12, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x73, 0x2e, 0x4d, 0x6f, 0x75, 0x73, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00,
	0x12, 0x2f, 0x0a, 0x03, 0x4b, 0x65, 0x79, 0x12, 0x12, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73,
	0x2e, 0x4b, 0x65, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x10, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x4b, 0x65, 0x79, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12,
	0x44, 0x0a, 0x0a, 0x53, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x73, 0x68, 0x6f, 0x74, 0x12, 0x18, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x53, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x73, 0x68, 0x6f,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x17, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x73, 0x2e, 0x53, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x73, 0x68, 0x6f, 0x74, 0x52, 0x65, 0x70, 0x6c,
	0x79, 0x22, 0x00, 0x12, 0x35, 0x0a, 0x05, 0x50, 0x61, 0x73, 0x74, 0x65, 0x12, 0x14, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x50, 0x61, 0x73, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x12, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x50, 0x61, 0x73, 0x74,
	0x65, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x42, 0x09, 0x5a, 0x07, 0x2e, 0x2f, 0x3b, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x73, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

func file_guacd_proto_rawDescGZIP() []byte {
	return file_guacd_proto_rawDesc
}

// GuacdClient is the client API for Guacd service.
type GuacdClient interface {
	Mouse(ctx context.Context, in *MouseRequest, opts ...grpc.CallOption) (*MouseReply, error)
	Key(ctx context.Context, in *KeyRequest, opts ...grpc.CallOption) (*KeyReply, error)
	Screenshot(ctx context.Context, in *ScreenshotRequest, opts ...grpc.CallOption) (*ScreenshotReply, error)
	Paste(ctx context.Context, in *PasteRequest, opts ...grpc.CallOption) (*PasteReply, error)
}

type guacdClient struct {
	cc grpc.ClientConnInterface
}

func NewGuacdClient(cc grpc.ClientConnInterface) GuacdClient {
	return &guacdClient{cc}
}

func (c *guacdClient) Mouse(ctx context.Context, in *MouseRequest, opts ...grpc.CallOption) (*MouseReply, error) {
	out := new(MouseReply)
	err := c.cc.Invoke(ctx, "/protos.Guacd/Mouse", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *guacdClient) Key(ctx context.Context, in *KeyRequest, opts ...grpc.CallOption) (*KeyReply, error) {
	out := new(KeyReply)
	err := c.cc.Invoke(ctx, "/protos.Guacd/Key", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *guacdClient) Screenshot(ctx context.Context, in *ScreenshotRequest, opts ...grpc.CallOption) (*ScreenshotReply, error) {
	out := new(ScreenshotReply)
	err := c.cc.Invoke(ctx, "/protos.Guacd/Screenshot", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *guacdClient) Paste(ctx context.Context, in *PasteRequest, opts ...grpc.CallOption) (*PasteReply, error) {
	out := new(PasteReply)
	err := c.cc.Invoke(ctx, "/protos.Guacd/Paste", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GuacdServer is the server API for Guacd service.
type GuacdServer interface {
	Mouse(context.Context, *MouseRequest) (*MouseReply, error)
	Key(context.Context, *KeyRequest) (*KeyReply, error)
	Screenshot(context.Context, *ScreenshotRequest) (*ScreenshotReply, error)
	Paste(context.Context, *PasteRequest) (*PasteReply, error)
}

// UnimplementedGuacdServer can be embedded to have forward compatible implementations.
type UnimplementedGuacdServer struct {
}

func (*UnimplementedGuacdServer) Mouse(context.Context, *MouseRequest) (*MouseReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Mouse not implemented")
}

func (*UnimplementedGuacdServer) Key(context.Context, *KeyRequest) (*KeyReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Key not implemented")
}

func (*UnimplementedGuacdServer) Screenshot(context.Context, *ScreenshotRequest) (*ScreenshotReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Screenshot not implemented")
}

func (*UnimplementedGuacdServer) Paste(context.Context, *PasteRequest) (*PasteReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Paste not implemented")
}

func RegisterGuacdServer(s *grpc.Server, srv GuacdServer) {
	s.RegisterService(&_Guacd_serviceDesc, srv)
}

var _Guacd_serviceDesc = grpc.ServiceDesc{
	ServiceName: "protos.Guacd",
	HandlerType: (*GuacdServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Mouse",
			Handler:    _Guacd_Mouse_Handler,
		},
		{
			MethodName: "Key",
			Handler:    _Guacd_Key_Handler,
		},
		{
			MethodName: "Screenshot",
			Handler:    _Guacd_Screenshot_Handler,
		},
		{
			MethodName: "Paste",
			Handler:    _Guacd_Paste_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "guacd.proto",
}

func _Guacd_Mouse_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MouseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GuacdServer).Mouse(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protos.Guacd/Mouse",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GuacdServer).Mouse(ctx, req.(*MouseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Guacd_Key_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(KeyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GuacdServer).Key(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protos.Guacd/Key",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GuacdServer).Key(ctx, req.(*KeyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Guacd_Screenshot_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ScreenshotRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GuacdServer).Screenshot(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protos.Guacd/Screenshot",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GuacdServer).Screenshot(ctx, req.(*ScreenshotRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Guacd_Paste_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PasteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GuacdServer).Paste(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protos.Guacd/Paste",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GuacdServer).Paste(ctx, req.(*PasteRequest))
	}
	return interceptor(ctx, in, info, handler)
}
